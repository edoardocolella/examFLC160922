
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\011\007\000\002\016" +
    "\004\000\002\017\004\000\002\020\004\000\002\012\003" +
    "\000\002\012\005\000\002\012\013\000\002\014\003\000" +
    "\002\014\003\000\002\015\004\000\002\015\002\000\002" +
    "\021\004\000\002\022\003\000\002\022\005\000\002\023" +
    "\004\000\002\024\003\000\002\024\005\000\002\025\006" +
    "\000\002\013\006\000\002\026\004\000\002\026\002\000" +
    "\002\027\004\000\002\027\004\000\002\030\004\000\002" +
    "\005\005\000\002\005\003\000\002\004\005\000\002\006" +
    "\006\000\002\003\003\000\002\003\004\000\002\010\006" +
    "\000\002\010\003\000\002\002\002\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\012\004\ufff6\005\007\006\004\007\ufff6\001" +
    "\002\000\004\012\111\001\002\000\012\004\ufff6\005\007" +
    "\006\004\007\ufff6\001\002\000\006\004\ufffc\007\076\001" +
    "\002\000\004\012\075\001\002\000\012\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\001\002\000\004\002\074\001\002\000" +
    "\004\004\014\001\002\000\012\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\001\002\000\004\021\017\001\002\000\004\012" +
    "\072\001\002\000\004\004\031\001\002\000\004\011\021" +
    "\001\002\000\004\012\ufff4\001\002\000\004\021\026\001" +
    "\002\000\006\010\024\012\ufff2\001\002\000\006\010\ufff1" +
    "\012\ufff1\001\002\000\004\011\021\001\002\000\006\010" +
    "\ufff0\012\ufff0\001\002\000\004\023\027\001\002\000\004" +
    "\013\030\001\002\000\006\010\uffef\012\uffef\001\002\000" +
    "\006\014\034\016\033\001\002\000\004\002\000\001\002" +
    "\000\004\022\057\001\002\000\004\021\050\001\002\000" +
    "\004\012\046\001\002\000\004\012\045\001\002\000\006" +
    "\014\034\016\033\001\002\000\006\014\034\016\033\001" +
    "\002\000\010\002\uffec\014\034\016\033\001\002\000\004" +
    "\002\uffee\001\002\000\010\002\uffec\014\034\016\033\001" +
    "\002\000\004\002\uffed\001\002\000\010\002\uffea\014\uffea" +
    "\016\uffea\001\002\000\010\002\uffeb\014\uffeb\016\uffeb\001" +
    "\002\000\006\010\uffe7\012\uffe7\001\002\000\004\022\054" +
    "\001\002\000\006\010\052\012\uffe9\001\002\000\004\021" +
    "\050\001\002\000\006\010\uffe8\012\uffe8\001\002\000\004" +
    "\015\055\001\002\000\006\010\uffe6\012\uffe6\001\002\000" +
    "\004\017\061\001\002\000\006\017\uffe4\020\060\001\002" +
    "\000\004\017\uffe3\001\002\000\004\021\063\001\002\000" +
    "\006\010\uffe1\012\uffe1\001\002\000\004\021\070\001\002" +
    "\000\006\010\uffe0\012\uffe5\001\002\000\004\010\066\001" +
    "\002\000\004\021\063\001\002\000\006\010\uffe2\012\uffe2" +
    "\001\002\000\004\023\071\001\002\000\006\010\uffdf\012" +
    "\uffdf\001\002\000\006\004\ufff5\021\017\001\002\000\004" +
    "\012\ufff3\001\002\000\004\002\001\001\002\000\012\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\001\002\000\004\012\107" +
    "\001\002\000\012\004\ufff6\005\007\006\004\007\ufff6\001" +
    "\002\000\006\004\ufffb\007\076\001\002\000\010\005\007" +
    "\006\004\007\ufff6\001\002\000\004\007\076\001\002\000" +
    "\010\005\007\006\004\007\ufff6\001\002\000\004\007\076" +
    "\001\002\000\010\004\ufff6\005\007\006\004\001\002\000" +
    "\004\004\ufffa\001\002\000\012\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\001\002\000\006\004\ufff7\007\ufff7\001\002\000" +
    "\012\004\ufffe\005\ufffe\006\ufffe\007\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\016\011\010\012\011\014\004\015\005\016" +
    "\012\017\007\001\001\000\002\001\001\000\012\014\004" +
    "\015\107\016\012\017\007\001\001\000\004\020\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\015\022" +
    "\014\023\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\021\025\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\035\013\031" +
    "\027\036\030\034\001\001\000\002\001\001\000\004\003" +
    "\055\001\001\000\006\004\046\005\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\035\027\037\030" +
    "\034\001\001\000\010\006\035\027\040\030\034\001\001" +
    "\000\012\006\035\026\041\027\042\030\034\001\001\000" +
    "\002\001\001\000\012\006\035\026\043\027\042\030\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\061\010\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\064\001\001" +
    "\000\002\001\001\000\004\007\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\004\015\077\016\012" +
    "\017\007\001\001\000\004\020\100\001\001\000\012\014" +
    "\004\015\101\016\012\017\007\001\001\000\004\020\102" +
    "\001\001\000\012\014\004\015\103\016\012\017\007\001" +
    "\001\000\004\020\104\001\001\000\012\014\004\015\105" +
    "\016\012\017\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    hash = new HashMap();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public static HashMap hash;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


     class DistanceClass{
        String city;
        Double distance;

        DistanceClass(String city, Double distance){
            this.city = city;
            this.distance = distance;
        }

     }


     class ElevClass{
        Integer actualSum;
        Integer lastElev;

        ElevClass(Integer num1, Integer num2){
            actualSum = num1;
            lastElev = num2;
        }
     }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= progr EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // progr ::= header SEP location SEP routes 
            { parser.Tree.reduce(5,"progr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("progr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tok1 ::= TOK1 S 
            { parser.Tree.reduce(2,"tok1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tok2 ::= TOK2 S 
            { parser.Tree.reduce(2,"tok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tok3 ::= TOK3 S 
            { parser.Tree.reduce(2,"tok3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= tok12l 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= tok12l tok3 tok12l 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= tok12l tok3 tok12l tok3 tok12l tok3 tok12l tok3 tok12l 
            { parser.Tree.reduce(9,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok12 ::= tok1 
            { parser.Tree.reduce(1,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok12 ::= tok2 
            { parser.Tree.reduce(1,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok12l ::= tok12 tok12l 
            { parser.Tree.reduce(2,"tok12l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12l",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tok12l ::= 
            { parser.Tree.reduce(0,"tok12l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12l",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // location ::= distanceList S 
            { parser.Tree.reduce(2,"location",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // distanceList ::= distance 
            { parser.Tree.reduce(1,"distanceList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distanceList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // distanceList ::= distanceList S distance 
            { parser.Tree.reduce(3,"distanceList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distanceList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // distance ::= CITY list_of_pos 
            { parser.Tree.reduce(2,"distance",0);
              Object RESULT =null;
		int cityleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cityright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String city = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hashMapleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hashMapright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hashMap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.hash.put(city, hashMap);
    //System.out.println(parser.hash.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distance",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_of_pos ::= pos 
            { parser.Tree.reduce(1,"list_of_pos",0);
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
HashMap hash =new HashMap();
DistanceClass dc = (DistanceClass)p;
hash.put(dc.city, dc.distance);
RESULT = hash;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_of_pos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_of_pos ::= list_of_pos C pos 
            { parser.Tree.reduce(3,"list_of_pos",0);
              Object RESULT =null;
		int hashleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hashright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hash = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        HashMap hashMap = (HashMap)hash;
        DistanceClass dc = (DistanceClass)p;
        hashMap.put(dc.city, dc.distance);
        RESULT = hashMap;           
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_of_pos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pos ::= TO CITY REAL_NUM KM 
            { parser.Tree.reduce(4,"pos",0);
              Object RESULT =null;
		int cityleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cityright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String city = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    DistanceClass dis = new DistanceClass(city, num);
    RESULT = dis;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // routes ::= command command command commandList 
            { parser.Tree.reduce(4,"routes",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("routes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // commandList ::= command commandList 
            { parser.Tree.reduce(2,"commandList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commandList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // commandList ::= 
            { parser.Tree.reduce(0,"commandList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commandList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command ::= elevCommand S 
            { parser.Tree.reduce(2,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // command ::= routeCommand S 
            { parser.Tree.reduce(2,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // elevCommand ::= ELEV elevList 
            { parser.Tree.reduce(2,"elevCommand",0);
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElevClass num = (ElevClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
System.out.println("ELEVATION " + num.actualSum + " m" );

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elevCommand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elevList ::= elevList C elevInfo 
            { parser.Tree.reduce(3,"elevList",0);
              ElevClass RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElevClass num1 = (ElevClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

/* System.out.println("num1: ");
System.out.println("lastElev: " + num1.lastElev);
System.out.println("actualSum: " + num1.actualSum);
System.out.println("num2: ");
System.out.println("lastElev: " + num2);
System.out.println(num2 + " - "+  num1.lastElev + " = " + (num2-num1.lastElev)+ "\n"); */
 RESULT= new ElevClass(num2-num1.lastElev + num1.actualSum, num2);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elevList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elevList ::= elevInfo 
            { parser.Tree.reduce(1,"elevList",0);
              ElevClass RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //System.out.println("elevList foglia: " + num);
    RESULT = new ElevClass(0, num);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elevList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elevInfo ::= CITY INT_NUM M 
            { parser.Tree.reduce(3,"elevInfo",0);
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    //System.out.println("elevInfoFoglia: "+ num);
RESULT=num;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elevInfo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // routeCommand ::= ROUTE routeInfo DD routeList 
            { parser.Tree.reduce(4,"routeCommand",0);
              Double RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Tot: "+ val+ " kcal");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("routeCommand",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // routeInfo ::= INT_NUM 
            { parser.Tree.reduce(1,"routeInfo",1);
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=num;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("routeInfo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // routeInfo ::= INT_NUM KCAL 
            { parser.Tree.reduce(2,"routeInfo",1);
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=num;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("routeInfo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // routeList ::= routeList NT0 C route 
            { parser.Tree.reduce(4,"routeList",0);
              Double RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double num1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
Double newVal = (Double)num1 + (Double)num2;
RESULT = newVal;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("routeList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // routeList ::= route 
            { parser.Tree.reduce(1,"routeList",0);
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            RESULT = num;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("routeList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Integer RESULT =null;
		
Integer val= (Integer)parser.stack(-2);
RESULT=val;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // route ::= CITY CITY REAL_NUM 
            { parser.Tree.reduce(3,"route",0);
              Double RESULT =null;
		int city1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int city1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String city1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int city2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int city2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String city2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

  HashMap innerHash = (HashMap) parser.hash.get(city1);
  Double number = (Double)innerHash.get(city2);
  Integer stackNumber = (Integer)parser.stack(-4);
    Double val = num * number * stackNumber;

    System.out.println(city1 + " " + city2 + " "+ val + " kcal");

   /* System.out.println("Stack value: " + stackNumber);
  System.out.println("Cities: " + city1 + " "+city2);
  System.out.println("Distance: " + number);
  System.out.println("Multiplier: " + num);
 System.out.println("Val: "+val);
 System.out.println("");  */
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("route",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
