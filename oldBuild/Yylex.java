/* The following code was generated by JFlex 1.6.1 */

/**************************
 Scanner
***************************/

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.jflex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\21\1\23\1\23\1\22\22\0\1\55\1\0\1\25"+
    "\1\11\1\11\3\0\1\17\1\24\1\3\1\4\1\53\1\20\1\31"+
    "\1\36\1\2\1\1\1\30\1\16\6\30\1\54\1\52\1\0\1\51"+
    "\3\0\1\46\3\27\1\43\3\27\1\47\2\27\1\44\1\27\1\50"+
    "\1\40\2\27\1\37\1\27\1\42\1\41\1\45\1\27\1\5\1\12"+
    "\1\27\4\0\1\6\1\0\1\34\1\26\1\33\7\26\1\15\1\35"+
    "\1\32\1\26\1\14\4\26\1\13\3\26\3\10\2\0\1\7\7\0"+
    "\1\23\u1fa2\0\1\23\1\23\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\5\1\1\2\1\1\2\3\2\1"+
    "\1\4\3\1\1\5\1\6\1\7\2\2\1\0\1\10"+
    "\3\0\1\11\3\0\2\10\1\0\2\2\1\12\5\0"+
    "\1\13\3\0\1\2\1\0\1\2\3\0\1\14\4\0"+
    "\1\15\1\2\6\0\1\16\1\0\1\2\7\0\1\3"+
    "\6\0\1\17\16\0\1\20\34\0\1\21\5\0\1\22"+
    "\20\0\1\21\71\0\1\22\76\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\57\0\u01d6\0\u0205\0\u0234\0\57\0\u0263"+
    "\0\u0292\0\u02c1\0\57\0\57\0\57\0\u02f0\0\u031f\0\u034e"+
    "\0\57\0\u037d\0\u03ac\0\u03db\0\57\0\u040a\0\u0439\0\u0468"+
    "\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u034e\0\u0582\0\u05b1"+
    "\0\u05e0\0\u060f\0\u063e\0\57\0\u066d\0\u069c\0\u06cb\0\u06fa"+
    "\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\57\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\57\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\57\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u063e\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u0c7c\0\u0cab\0\57\0\u0cda\0\u0d09\0\u0d38\0\u0d67"+
    "\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf"+
    "\0\u0f0e\0\u0f3d\0\57\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028"+
    "\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0"+
    "\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318"+
    "\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\57"+
    "\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751"+
    "\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9"+
    "\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41"+
    "\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9"+
    "\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31"+
    "\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9"+
    "\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021"+
    "\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199"+
    "\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311"+
    "\0\u21f7\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a"+
    "\0\u2489\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2"+
    "\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a"+
    "\0\u2779\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2"+
    "\0\u28f1\0\u2920\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a"+
    "\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u2bb2"+
    "\0\u2be1\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a"+
    "\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\5\4\2\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\2\1\13\1\14\1\0"+
    "\1\2\1\15\1\2\1\16\1\11\1\2\1\17\4\2"+
    "\1\20\3\16\1\21\5\16\1\22\1\23\1\24\1\25"+
    "\2\13\60\0\1\26\1\27\13\0\1\11\11\0\1\11"+
    "\1\30\56\0\1\30\32\0\1\31\1\32\3\0\1\31"+
    "\14\0\1\31\7\0\12\31\13\0\1\31\1\33\3\0"+
    "\1\31\14\0\1\31\7\0\12\31\22\0\1\34\74\0"+
    "\1\35\1\36\24\0\2\11\13\0\1\11\11\0\1\11"+
    "\1\30\31\0\1\37\73\0\1\13\42\0\1\40\2\0"+
    "\1\40\1\0\4\40\10\0\2\40\2\0\4\40\1\0"+
    "\12\40\4\0\1\40\6\0\1\31\4\0\1\31\14\0"+
    "\1\31\7\0\12\31\13\0\1\31\4\0\1\31\14\0"+
    "\1\31\7\0\1\31\1\41\10\31\13\0\1\31\4\0"+
    "\1\31\14\0\1\31\7\0\5\31\1\42\4\31\57\0"+
    "\1\43\6\0\2\44\13\0\1\11\11\0\1\11\1\30"+
    "\26\0\1\45\1\26\13\0\1\11\11\0\1\11\1\30"+
    "\26\0\2\46\13\0\1\46\11\0\1\46\27\0\1\47"+
    "\65\0\1\50\63\0\1\51\75\0\1\52\42\0\1\53"+
    "\43\0\1\40\2\0\1\40\1\0\4\40\7\0\1\54"+
    "\2\40\2\0\4\40\1\0\12\40\4\0\1\40\42\0"+
    "\1\55\60\0\1\56\64\0\1\57\6\0\2\60\2\61"+
    "\11\0\1\11\11\0\1\11\1\30\26\0\1\62\1\44"+
    "\2\61\11\0\1\11\11\0\1\11\1\30\26\0\1\63"+
    "\1\64\64\0\1\65\64\0\1\66\75\0\1\67\21\0"+
    "\20\53\1\70\3\0\33\53\42\0\1\71\61\0\1\72"+
    "\62\0\1\73\6\0\2\74\2\61\11\0\1\11\11\0"+
    "\1\11\1\30\26\0\1\75\56\0\1\74\1\60\2\61"+
    "\11\0\1\11\11\0\1\11\1\30\26\0\2\76\55\0"+
    "\1\77\1\63\64\0\1\100\104\0\1\101\20\0\4\53"+
    "\1\102\13\53\1\70\3\0\33\53\43\0\1\103\61\0"+
    "\1\104\11\0\2\105\2\61\11\0\1\11\11\0\1\11"+
    "\1\30\26\0\1\106\1\107\55\0\2\110\2\111\53\0"+
    "\1\112\1\76\2\111\62\0\1\113\63\0\1\114\41\0"+
    "\20\53\1\70\3\0\1\115\32\53\42\0\1\116\15\0"+
    "\2\11\2\61\11\0\1\11\11\0\1\11\1\30\26\0"+
    "\2\117\55\0\1\120\1\106\55\0\2\121\2\111\53\0"+
    "\1\122\56\0\1\121\1\110\2\111\62\0\1\123\100\0"+
    "\1\124\73\0\1\125\10\0\2\126\2\127\53\0\1\130"+
    "\1\117\2\127\53\0\2\131\2\111\53\0\1\132\1\133"+
    "\64\0\1\134\106\0\1\135\17\0\2\136\2\127\53\0"+
    "\1\137\56\0\1\136\1\126\2\127\55\0\2\111\53\0"+
    "\2\140\55\0\1\141\1\132\64\0\1\123\1\142\115\0"+
    "\1\143\7\0\2\144\2\127\53\0\1\145\1\146\55\0"+
    "\2\147\2\150\53\0\1\151\1\140\2\150\62\0\1\152"+
    "\51\0\2\127\53\0\2\153\55\0\1\154\1\145\55\0"+
    "\2\155\2\150\53\0\1\156\56\0\1\155\1\147\2\150"+
    "\62\0\1\157\47\0\2\160\2\161\53\0\1\162\1\153"+
    "\2\161\53\0\2\163\2\150\53\0\1\164\1\165\64\0"+
    "\1\166\47\0\2\167\2\161\53\0\1\170\56\0\1\167"+
    "\1\160\2\161\55\0\2\150\53\0\2\171\55\0\1\172"+
    "\1\164\64\0\1\173\47\0\2\174\2\161\53\0\1\175"+
    "\1\176\55\0\2\177\2\200\53\0\1\201\1\171\2\200"+
    "\62\0\1\202\51\0\2\161\53\0\2\203\55\0\1\204"+
    "\1\175\55\0\2\205\2\200\53\0\1\205\1\177\2\200"+
    "\62\0\1\206\47\0\2\207\2\210\53\0\1\211\1\203"+
    "\2\210\53\0\2\212\2\200\62\0\1\202\1\213\46\0"+
    "\2\214\2\210\53\0\1\215\56\0\1\214\1\207\2\210"+
    "\55\0\2\200\62\0\1\216\47\0\2\217\2\210\53\0"+
    "\1\220\1\221\64\0\1\222\51\0\2\210\53\0\2\223"+
    "\55\0\1\224\1\220\64\0\1\225\47\0\2\226\2\227"+
    "\53\0\1\230\1\223\2\227\62\0\1\231\47\0\2\232"+
    "\2\227\53\0\1\233\56\0\1\232\1\226\2\227\62\0"+
    "\1\234\47\0\2\235\2\227\53\0\1\236\1\237\64\0"+
    "\1\240\51\0\2\227\53\0\2\241\55\0\1\242\1\236"+
    "\64\0\1\234\1\243\46\0\2\244\2\245\53\0\1\246"+
    "\1\241\2\245\62\0\1\247\47\0\2\250\2\245\53\0"+
    "\1\251\56\0\1\250\1\244\2\245\62\0\1\252\47\0"+
    "\2\253\2\245\53\0\1\254\1\255\64\0\1\256\51\0"+
    "\2\245\53\0\2\257\55\0\1\260\1\254\64\0\1\261"+
    "\47\0\2\262\2\263\53\0\1\264\1\257\2\263\62\0"+
    "\1\265\47\0\2\266\2\263\53\0\1\267\56\0\1\266"+
    "\1\262\2\263\62\0\1\270\47\0\2\271\2\263\53\0"+
    "\1\272\1\273\64\0\1\265\1\274\50\0\2\263\53\0"+
    "\2\275\55\0\1\276\1\272\64\0\1\277\47\0\2\300"+
    "\2\301\53\0\1\302\1\275\2\301\62\0\1\303\47\0"+
    "\2\304\2\301\53\0\1\305\56\0\1\304\1\300\2\301"+
    "\62\0\1\306\47\0\2\307\2\301\53\0\1\310\1\311"+
    "\64\0\1\312\51\0\2\301\53\0\2\313\55\0\1\314"+
    "\1\310\64\0\1\315\47\0\2\316\2\317\53\0\1\320"+
    "\1\313\2\317\62\0\1\321\47\0\2\322\2\317\53\0"+
    "\1\323\56\0\1\322\1\316\2\317\53\0\2\324\2\317"+
    "\53\0\1\325\1\326\57\0\2\317\53\0\2\327\55\0"+
    "\1\330\1\325\55\0\2\331\2\332\53\0\1\333\1\327"+
    "\2\332\53\0\2\334\2\332\53\0\1\335\56\0\1\334"+
    "\1\331\2\332\53\0\2\336\2\332\53\0\1\337\1\340"+
    "\57\0\2\332\53\0\2\341\55\0\1\342\1\337\55\0"+
    "\2\343\2\344\53\0\1\345\1\341\2\344\53\0\2\346"+
    "\2\344\53\0\1\347\56\0\1\346\1\343\2\344\53\0"+
    "\2\350\2\344\53\0\1\351\1\352\57\0\2\344\53\0"+
    "\2\353\55\0\1\354\1\351\55\0\2\355\2\356\53\0"+
    "\1\357\1\353\2\356\53\0\2\360\2\356\53\0\1\361"+
    "\56\0\1\360\1\355\2\356\53\0\2\362\2\356\53\0"+
    "\1\363\1\364\57\0\2\356\53\0\2\365\55\0\1\366"+
    "\1\363\55\0\2\367\2\370\53\0\1\371\1\365\2\370"+
    "\53\0\2\372\2\370\53\0\1\373\56\0\1\372\1\367"+
    "\2\370\53\0\2\374\2\370\53\0\1\375\1\376\57\0"+
    "\2\370\53\0\2\377\55\0\1\u0100\1\375\55\0\2\u0101"+
    "\2\u0102\53\0\1\u0103\1\377\2\u0102\53\0\2\u0104\2\u0102"+
    "\53\0\1\u0105\56\0\1\u0104\1\u0101\2\u0102\53\0\2\u0106"+
    "\2\u0102\53\0\1\u0107\1\u0108\57\0\2\u0102\53\0\2\u0109"+
    "\55\0\1\u010a\1\u0107\55\0\2\u010b\2\u010c\53\0\1\u010d"+
    "\1\u0109\2\u010c\53\0\2\u010e\2\u010c\61\0\1\200\50\0"+
    "\1\u010e\1\u010b\2\u010c\53\0\2\u010f\2\u010c\55\0\2\u010c"+
    "\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11938];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\3\1\1\11\3\1\3\11"+
    "\2\1\1\0\1\11\3\0\1\11\3\0\2\1\1\0"+
    "\3\1\5\0\1\11\3\0\1\1\1\0\1\1\3\0"+
    "\1\11\4\0\1\11\1\1\6\0\1\11\1\0\1\1"+
    "\7\0\1\1\6\0\1\11\16\0\1\11\34\0\1\11"+
    "\5\0\1\1\20\0\1\1\71\0\1\1\76\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol sym(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	
	private Symbol sym(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Scanner Error: " + yytext());
            }
          case 19: break;
          case 2: 
            { System.out.println("INT_NUM " + yytext());
    //return sym(sym.INT_NUM);
            }
          case 20: break;
          case 3: 
            { ;
            }
          case 21: break;
          case 4: 
            { System.out.println("M " + yytext());
    //return sym(sym.M);
            }
          case 22: break;
          case 5: 
            { System.out.println("SC " + yytext());
	//return sym(sym.SC);
            }
          case 23: break;
          case 6: 
            { System.out.println("COMMA " + yytext());
	//return sym(sym.COMMA);
            }
          case 24: break;
          case 7: 
            { System.out.println("DD " + yytext());
	//return sym(sym.DD);
            }
          case 25: break;
          case 8: 
            { System.out.println("PROV " + yytext());
	//return new sym(sym.PROV, new String(yytext()));
            }
          case 26: break;
          case 9: 
            { System.out.println("KM " + yytext());
    //return sym(sym.KM);
            }
          case 27: break;
          case 10: 
            { System.out.println("REAL_NUM " + yytext());
	//return sym(sym.CITY, new String(yytext()));
            }
          case 28: break;
          case 11: 
            { System.out.println("CITY " + yytext());
	//return sym(sym.CITY, new String(yytext()));
            }
          case 29: break;
          case 12: 
            { System.out.println("TOK3 " + yytext());
	//return sym(sym.TOK3);
            }
          case 30: break;
          case 13: 
            { System.out.println("SEP " + yytext());
	//return sym(sym.SEP);
            }
          case 31: break;
          case 14: 
            { System.out.println("ROUTE " + yytext());
    //return sym(sym.ROUTE);
            }
          case 32: break;
          case 15: 
            { System.out.println("kcal " + yytext());
    //return sym(sym.KCAL);
            }
          case 33: break;
          case 16: 
            { System.out.println("ELEVATION " + yytext());
    //return sym(sym.ELEVATION);
            }
          case 34: break;
          case 17: 
            { System.out.println("TOK1 " + yytext());
	//return sym(sym.TOK1);
            }
          case 35: break;
          case 18: 
            { System.out.println("TOK2 " + yytext());
	//return sym(sym.TOK2);
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
