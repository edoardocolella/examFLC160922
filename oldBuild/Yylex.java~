/* The following code was generated by JFlex 1.6.1 */

/**************************
 Scanner
***************************/

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.jflex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\21\1\23\1\23\1\22\22\0\1\53\1\0\1\25"+
    "\1\11\1\11\3\0\1\17\1\24\1\3\1\4\1\52\1\20\1\31"+
    "\1\0\1\2\1\1\1\30\1\16\6\30\1\0\1\51\1\0\1\50"+
    "\3\0\1\45\3\27\1\42\3\27\1\46\2\27\1\43\1\27\1\47"+
    "\1\37\2\27\1\36\1\27\1\41\1\40\1\44\1\27\1\5\1\12"+
    "\1\27\4\0\1\6\1\0\1\34\1\26\1\33\7\26\1\15\1\35"+
    "\1\32\1\26\1\14\4\26\1\13\3\26\3\10\2\0\1\7\7\0"+
    "\1\23\u1fa2\0\1\23\1\23\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\5\1\1\2\1\1\2\3\2\1"+
    "\1\4\3\1\1\5\1\6\2\2\1\0\1\7\3\0"+
    "\1\10\3\0\2\7\1\0\2\2\1\11\5\0\1\12"+
    "\3\0\1\2\1\0\1\2\3\0\1\13\1\14\3\0"+
    "\1\15\1\2\5\0\1\16\1\0\1\2\6\0\1\3"+
    "\24\0\1\17\34\0\1\20\5\0\1\21\20\0\1\20"+
    "\71\0\1\21\76\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\55\0\u01c2\0\u01ef\0\u021c\0\55\0\u0249"+
    "\0\u0276\0\u02a3\0\55\0\55\0\u02d0\0\u02fd\0\u032a\0\55"+
    "\0\u0357\0\u0384\0\u03b1\0\55\0\u03de\0\u040b\0\u0438\0\u0465"+
    "\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u032a\0\u0546\0\u0573\0\u05a0"+
    "\0\u05cd\0\u05fa\0\55\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\u0735\0\u0762\0\u078f\0\55\0\55\0\u07bc\0\u07e9"+
    "\0\u0816\0\55\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\55\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f"+
    "\0\u0a8c\0\u05fa\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\55\0\u0e3d"+
    "\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5"+
    "\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d"+
    "\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275"+
    "\0\u12a2\0\u12cf\0\u12fc\0\55\0\u1329\0\u1356\0\u1383\0\u13b0"+
    "\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518"+
    "\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680"+
    "\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8"+
    "\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950"+
    "\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8"+
    "\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20"+
    "\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88"+
    "\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0"+
    "\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058"+
    "\0\u2085\0\u20b2\0\u20df\0\u210c\0\u1ffe\0\u2139\0\u2166\0\u2193"+
    "\0\u21c0\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb"+
    "\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463"+
    "\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb"+
    "\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733"+
    "\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e\0\u289b"+
    "\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6\0\u2a03"+
    "\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b"+
    "\0\u2b98\0\u2bc5\0\u2bf2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\5\4\2\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\2\1\13\1\14\1\0"+
    "\1\2\1\15\1\2\1\16\1\11\1\2\1\17\3\2"+
    "\1\20\3\16\1\21\5\16\1\22\1\23\1\24\2\13"+
    "\56\0\1\25\1\26\13\0\1\11\11\0\1\11\1\27"+
    "\54\0\1\27\30\0\1\30\1\31\3\0\1\30\14\0"+
    "\1\30\6\0\12\30\12\0\1\30\1\32\3\0\1\30"+
    "\14\0\1\30\6\0\12\30\21\0\1\33\72\0\1\34"+
    "\1\35\22\0\2\11\13\0\1\11\11\0\1\11\1\27"+
    "\27\0\1\36\71\0\1\13\40\0\1\37\2\0\1\37"+
    "\1\0\4\37\10\0\2\37\2\0\16\37\3\0\1\37"+
    "\6\0\1\30\4\0\1\30\14\0\1\30\6\0\12\30"+
    "\12\0\1\30\4\0\1\30\14\0\1\30\6\0\1\30"+
    "\1\40\10\30\12\0\1\30\4\0\1\30\14\0\1\30"+
    "\6\0\5\30\1\41\4\30\55\0\1\42\5\0\2\43"+
    "\13\0\1\11\11\0\1\11\1\27\24\0\1\44\1\25"+
    "\13\0\1\11\11\0\1\11\1\27\24\0\2\45\13\0"+
    "\1\45\11\0\1\45\25\0\1\46\63\0\1\47\61\0"+
    "\1\50\73\0\1\51\40\0\1\52\41\0\1\37\2\0"+
    "\1\37\1\0\4\37\7\0\1\53\2\37\2\0\16\37"+
    "\3\0\1\37\41\0\1\54\56\0\1\55\62\0\1\56"+
    "\5\0\2\57\2\60\11\0\1\11\11\0\1\11\1\27"+
    "\24\0\1\61\1\43\2\60\11\0\1\11\11\0\1\11"+
    "\1\27\24\0\1\62\1\63\62\0\1\64\62\0\1\65"+
    "\73\0\1\66\17\0\20\52\1\67\3\0\31\52\41\0"+
    "\1\70\57\0\1\71\60\0\1\72\5\0\2\73\2\60"+
    "\11\0\1\11\11\0\1\11\1\27\24\0\1\74\54\0"+
    "\1\73\1\57\2\60\11\0\1\11\11\0\1\11\1\27"+
    "\24\0\2\75\53\0\1\76\1\62\62\0\1\77\44\0"+
    "\4\52\1\100\13\52\1\67\3\0\31\52\42\0\1\101"+
    "\57\0\1\102\10\0\2\103\2\60\11\0\1\11\11\0"+
    "\1\11\1\27\24\0\1\104\1\105\53\0\2\106\2\107"+
    "\51\0\1\110\1\75\2\107\60\0\1\111\44\0\20\52"+
    "\1\67\3\0\1\112\30\52\41\0\1\113\14\0\2\11"+
    "\2\60\11\0\1\11\11\0\1\11\1\27\24\0\2\114"+
    "\53\0\1\115\1\104\53\0\2\116\2\107\51\0\1\117"+
    "\54\0\1\116\1\106\2\107\60\0\1\120\112\0\1\121"+
    "\7\0\2\122\2\123\51\0\1\124\1\114\2\123\51\0"+
    "\2\125\2\107\51\0\1\126\1\127\62\0\1\130\103\0"+
    "\1\131\16\0\2\132\2\123\51\0\1\133\54\0\1\132"+
    "\1\122\2\123\53\0\2\107\51\0\2\134\53\0\1\135"+
    "\1\126\62\0\1\120\1\136\112\0\1\137\6\0\2\140"+
    "\2\123\51\0\1\141\1\142\53\0\2\143\2\144\51\0"+
    "\1\145\1\134\2\144\60\0\1\146\47\0\2\123\51\0"+
    "\2\147\53\0\1\150\1\141\53\0\2\151\2\144\51\0"+
    "\1\152\54\0\1\151\1\143\2\144\60\0\1\153\45\0"+
    "\2\154\2\155\51\0\1\156\1\147\2\155\51\0\2\157"+
    "\2\144\51\0\1\160\1\161\62\0\1\162\45\0\2\163"+
    "\2\155\51\0\1\164\54\0\1\163\1\154\2\155\53\0"+
    "\2\144\51\0\2\165\53\0\1\166\1\160\62\0\1\167"+
    "\45\0\2\170\2\155\51\0\1\171\1\172\53\0\2\173"+
    "\2\174\51\0\1\175\1\165\2\174\60\0\1\176\47\0"+
    "\2\155\51\0\2\177\53\0\1\200\1\171\53\0\2\201"+
    "\2\174\51\0\1\201\1\173\2\174\60\0\1\202\45\0"+
    "\2\203\2\204\51\0\1\205\1\177\2\204\51\0\2\206"+
    "\2\174\60\0\1\176\1\207\44\0\2\210\2\204\51\0"+
    "\1\211\54\0\1\210\1\203\2\204\53\0\2\174\60\0"+
    "\1\212\45\0\2\213\2\204\51\0\1\214\1\215\62\0"+
    "\1\216\47\0\2\204\51\0\2\217\53\0\1\220\1\214"+
    "\62\0\1\221\45\0\2\222\2\223\51\0\1\224\1\217"+
    "\2\223\60\0\1\225\45\0\2\226\2\223\51\0\1\227"+
    "\54\0\1\226\1\222\2\223\60\0\1\230\45\0\2\231"+
    "\2\223\51\0\1\232\1\233\62\0\1\234\47\0\2\223"+
    "\51\0\2\235\53\0\1\236\1\232\62\0\1\230\1\237"+
    "\44\0\2\240\2\241\51\0\1\242\1\235\2\241\60\0"+
    "\1\243\45\0\2\244\2\241\51\0\1\245\54\0\1\244"+
    "\1\240\2\241\60\0\1\246\45\0\2\247\2\241\51\0"+
    "\1\250\1\251\62\0\1\252\47\0\2\241\51\0\2\253"+
    "\53\0\1\254\1\250\62\0\1\255\45\0\2\256\2\257"+
    "\51\0\1\260\1\253\2\257\60\0\1\261\45\0\2\262"+
    "\2\257\51\0\1\263\54\0\1\262\1\256\2\257\60\0"+
    "\1\264\45\0\2\265\2\257\51\0\1\266\1\267\62\0"+
    "\1\261\1\270\46\0\2\257\51\0\2\271\53\0\1\272"+
    "\1\266\62\0\1\273\45\0\2\274\2\275\51\0\1\276"+
    "\1\271\2\275\60\0\1\277\45\0\2\300\2\275\51\0"+
    "\1\301\54\0\1\300\1\274\2\275\60\0\1\302\45\0"+
    "\2\303\2\275\51\0\1\304\1\305\62\0\1\306\47\0"+
    "\2\275\51\0\2\307\53\0\1\310\1\304\62\0\1\311"+
    "\45\0\2\312\2\313\51\0\1\314\1\307\2\313\60\0"+
    "\1\315\45\0\2\316\2\313\51\0\1\317\54\0\1\316"+
    "\1\312\2\313\51\0\2\320\2\313\51\0\1\321\1\322"+
    "\55\0\2\313\51\0\2\323\53\0\1\324\1\321\53\0"+
    "\2\325\2\326\51\0\1\327\1\323\2\326\51\0\2\330"+
    "\2\326\51\0\1\331\54\0\1\330\1\325\2\326\51\0"+
    "\2\332\2\326\51\0\1\333\1\334\55\0\2\326\51\0"+
    "\2\335\53\0\1\336\1\333\53\0\2\337\2\340\51\0"+
    "\1\341\1\335\2\340\51\0\2\342\2\340\51\0\1\343"+
    "\54\0\1\342\1\337\2\340\51\0\2\344\2\340\51\0"+
    "\1\345\1\346\55\0\2\340\51\0\2\347\53\0\1\350"+
    "\1\345\53\0\2\351\2\352\51\0\1\353\1\347\2\352"+
    "\51\0\2\354\2\352\51\0\1\355\54\0\1\354\1\351"+
    "\2\352\51\0\2\356\2\352\51\0\1\357\1\360\55\0"+
    "\2\352\51\0\2\361\53\0\1\362\1\357\53\0\2\363"+
    "\2\364\51\0\1\365\1\361\2\364\51\0\2\366\2\364"+
    "\51\0\1\367\54\0\1\366\1\363\2\364\51\0\2\370"+
    "\2\364\51\0\1\371\1\372\55\0\2\364\51\0\2\373"+
    "\53\0\1\374\1\371\53\0\2\375\2\376\51\0\1\377"+
    "\1\373\2\376\51\0\2\u0100\2\376\51\0\1\u0101\54\0"+
    "\1\u0100\1\375\2\376\51\0\2\u0102\2\376\51\0\1\u0103"+
    "\1\u0104\55\0\2\376\51\0\2\u0105\53\0\1\u0106\1\u0103"+
    "\53\0\2\u0107\2\u0108\51\0\1\u0109\1\u0105\2\u0108\51\0"+
    "\2\u010a\2\u0108\57\0\1\174\46\0\1\u010a\1\u0107\2\u0108"+
    "\51\0\2\u010b\2\u0108\53\0\2\u0108\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11295];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\3\1\1\11\3\1\2\11"+
    "\2\1\1\0\1\11\3\0\1\11\3\0\2\1\1\0"+
    "\3\1\5\0\1\11\3\0\1\1\1\0\1\1\3\0"+
    "\2\11\3\0\1\11\1\1\5\0\1\11\1\0\1\1"+
    "\6\0\1\1\24\0\1\11\34\0\1\11\5\0\1\1"+
    "\20\0\1\1\71\0\1\1\76\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol sym(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	
	private Symbol sym(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Scanner Error: " + yytext());
            }
          case 18: break;
          case 2: 
            { System.out.println("INT_NUM " + yytext());
    //return sym(sym.INT_NUM);
            }
          case 19: break;
          case 3: 
            { ;
            }
          case 20: break;
          case 4: 
            { System.out.println("M " + yytext());
    //return sym(sym.M);
            }
          case 21: break;
          case 5: 
            { System.out.println("CL " + yytext());
	//return sym(sym.CL);
            }
          case 22: break;
          case 6: 
            { System.out.println("COMMA " + yytext());
	//return sym(sym.COMMA);
            }
          case 23: break;
          case 7: 
            { System.out.println("PROV " + yytext());
	//return new sym(sym.PROV, new String(yytext()));
            }
          case 24: break;
          case 8: 
            { System.out.println("KM " + yytext());
    //return sym(sym.KM);
            }
          case 25: break;
          case 9: 
            { System.out.println("REAL_NUM " + yytext());
	//return sym(sym.CITY, new String(yytext()));
            }
          case 26: break;
          case 10: 
            { System.out.println("CITY " + yytext());
	//return sym(sym.CITY, new String(yytext()));
            }
          case 27: break;
          case 11: 
            { System.out.println("TOK3 " + yytext());
	//return sym(sym.TOK3);
            }
          case 28: break;
          case 12: 
            { System.out.println("kcal " + yytext());
    //return sym(sym.KCAL);
            }
          case 29: break;
          case 13: 
            { System.out.println("SEP " + yytext());
	//return sym(sym.SEP);
            }
          case 30: break;
          case 14: 
            { System.out.println("ROUTE " + yytext());
    //return sym(sym.ROUTE);
            }
          case 31: break;
          case 15: 
            { System.out.println("ELEVATION " + yytext());
    //return sym(sym.ELEVATION);
            }
          case 32: break;
          case 16: 
            { System.out.println("TOK1 " + yytext());
	//return sym(sym.TOK1);
            }
          case 33: break;
          case 17: 
            { System.out.println("TOK2 " + yytext());
	//return sym(sym.TOK2);
            }
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
